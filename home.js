"use strict";(self.webpackChunkrestaurant_page=self.webpackChunkrestaurant_page||[]).push([[177],{666:(e,t,n)=>{n.d(t,{AB:()=>i,dc:()=>o,dl:()=>d});const o=()=>{const e=document.createElement("header");return e.textContent="Lsig's Neovim config",e},i=()=>{const e=document.createElement("nav"),t=a("Home","home-btn"),n=a("Plugins","plugin-btn"),o=a("Contact me","contact-btn");return t.setAttribute("class","active"),e.appendChild(t),e.appendChild(n),e.appendChild(o),e},a=(e,t)=>{const n=document.createElement("div");return n.setAttribute("id",t),n.setAttribute("class","btn"),n.innerText=e,n},d=()=>{const e=document.createElement("div"),t=document.createElement("h1"),n=document.createTextNode("Setting up your Neovim config"),o=r(),i=l(),a=c(),d=u();return t.appendChild(n),e.setAttribute("id","setup"),e.appendChild(t),e.appendChild(o),e.appendChild(i),e.appendChild(a),e.appendChild(d),e},r=()=>{const e=document.createElement("div"),t=document.createElement("h2"),n=document.createElement("p"),o=document.createTextNode("1. Installation"),i=document.createTextNode("To install Neovim, a user can go to the official website at neovim.io and follow the installation instructions provided for their specific operating system. Neovim supports various platforms including Windows, macOS, and Linux.");return t.appendChild(o),n.appendChild(i),e.appendChild(t),e.appendChild(n),e},l=()=>{const e=document.createElement("div"),t=document.createElement("h2"),n=document.createElement("p"),o=document.createTextNode("2. Structuring your Neovim config"),i=document.createTextNode("To setup your Neovim config, go to your .config folder from your home directory. If the directory does not exist, mkdir .config in your homedirectory. Go inside .config and make a folder called nvim. Now make a init.lua file, a folder called lua and a folder called after. Inside the after directory make a folder called plugins, this is where your plugins will be stored and configured. Inside the lua folder make a directory <your-name>, this folder will store your core config files which will be loaded before your plugins. This video by ThePrimeagen (legend) kickstarted my Neovim journey and is extremely helpful, check it out!"),a=document.createElement("a");a.href="https://www.youtube.com/watch?v=w7i4amO_zaE&t=839s&ab_channel=ThePrimeagen",a.target="_blank";const d=document.createTextNode("Primes setup tutorial.");return t.appendChild(o),n.appendChild(i),a.appendChild(d),e.appendChild(t),e.appendChild(n),e.appendChild(a),e},c=()=>{const e=document.createElement("div"),t=document.createElement("h2"),n=document.createElement("p"),o=document.createTextNode("3. Setting up your Neovim plugin manager"),i=document.createTextNode("There are some popular Neovim plugin managers out there like Packer, Lazy and VimPlug. I personally use lazy.nvim which I am extremely happy with and mad props to folke. So I will focus on setting up on the Lazy plugin manager. Inside your <your-name> folder create a file called lazy.nvim. Goto lazy.nvim github page and follow the installation instructions, after that check out the plugins page and start adding the essential plugins listed there."),a=document.createElement("a");a.href="https://github.com/folke/lazy.nvim",a.target="_blank";const d=document.createTextNode("Lazy.nvim on github, check it out!");return t.appendChild(o),n.appendChild(i),a.appendChild(d),e.appendChild(t),e.appendChild(n),e.appendChild(a),e},u=()=>{const e=document.createElement("div"),t=document.createElement("h2"),n=document.createElement("p"),o=document.createTextNode("4. Enjoy Neovim!"),i=document.createTextNode("Now you have probably downloaded your first plugins, maybe written a little program using Neovim, I know at first it is tough; especially if you are just learning Vim motions. But trust me, it will be worth it, your productivity will go up, learning new motions and seeing noticable progress feels amazing, and the best part, Neovim is your own personalized text editor. No one will have the same experience as you, which I find amazing. Hope your Neovim journey will be long and fruitful, stay curious!  ");return t.appendChild(o),n.appendChild(i),e.appendChild(t),e.appendChild(n),e}}},e=>{e(e.s=666)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,