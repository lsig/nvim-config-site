"use strict";(self.webpackChunkrestaurant_page=self.webpackChunkrestaurant_page||[]).push([[143,177,414],{426:(e,n,t)=>{t.d(n,{Z:()=>c});var i=t(537),o=t.n(i),a=t(645),r=t.n(a)()(o());r.push([e.id,"header,\nnav {\n  display: flex;\n  color: #718ebc;\n  background-color: #1b1b27;\n  font-family: copperplate, Ariel;\n}\n\nbody {\n  background-color: #1b1b27;\n}\n\nheader {\n  justify-content: center;\n  font-size: 50px;\n  padding: 2rem 3rem;\n  margin-top: -0.5rem;\n  margin-left: -0.5rem;\n  margin-right: -0.5rem;\n}\n\nnav {\n  justify-content: space-between;\n  height: 3rem;\n  font-size: 30px;\n  margin: 0rem -0.5rem;\n}\n\n#home-btn,\n#plugin-btn,\n#contact-btn {\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  justify-content: center;\n  height: 70%;\n  width: 100%;\n  padding: 1% 4%;\n  border-top: 2px solid #718ebc;\n  border-bottom: 2px solid #718ebc;\n}\n\n#plugin-btn {\n  margin: 0rem 0.4rem;\n}\n\n#home-btn:hover,\n#plugin-btn:hover,\n#contact-btn:hover {\n  font-size: 34px;\n  color: #aabbd7;\n  border-top: 2px solid #aabbd7;\n  border-bottom: 2px solid #aabbd7;\n}\n\n.active {\n  color: #c1a97a;\n  text-shadow: 0 0 10px #c1a97a, 0 0 20px #c1a97a;\n}\n\n#container {\n  color: #a9b3d9;\n  margin: 4rem 16rem;\n}\n\na {\n  color: #b796ed;\n  text-decoration: none;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;EAEE,aAAa;EACb,cAAc;EACd,yBAAyB;EACzB,+BAA+B;AACjC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;EACvB,eAAe;EACf,kBAAkB;EAClB,mBAAmB;EACnB,oBAAoB;EACpB,qBAAqB;AACvB;;AAEA;EACE,8BAA8B;EAC9B,YAAY;EACZ,eAAe;EACf,oBAAoB;AACtB;;AAEA;;;EAGE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,uBAAuB;EACvB,WAAW;EACX,WAAW;EACX,cAAc;EACd,6BAA6B;EAC7B,gCAAgC;AAClC;;AAEA;EACE,mBAAmB;AACrB;;AAEA;;;EAGE,eAAe;EACf,cAAc;EACd,6BAA6B;EAC7B,gCAAgC;AAClC;;AAEA;EACE,cAAc;EACd,+CAA+C;AACjD;;AAEA;EACE,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,qBAAqB;AACvB",sourcesContent:["header,\nnav {\n  display: flex;\n  color: #718ebc;\n  background-color: #1b1b27;\n  font-family: copperplate, Ariel;\n}\n\nbody {\n  background-color: #1b1b27;\n}\n\nheader {\n  justify-content: center;\n  font-size: 50px;\n  padding: 2rem 3rem;\n  margin-top: -0.5rem;\n  margin-left: -0.5rem;\n  margin-right: -0.5rem;\n}\n\nnav {\n  justify-content: space-between;\n  height: 3rem;\n  font-size: 30px;\n  margin: 0rem -0.5rem;\n}\n\n#home-btn,\n#plugin-btn,\n#contact-btn {\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  justify-content: center;\n  height: 70%;\n  width: 100%;\n  padding: 1% 4%;\n  border-top: 2px solid #718ebc;\n  border-bottom: 2px solid #718ebc;\n}\n\n#plugin-btn {\n  margin: 0rem 0.4rem;\n}\n\n#home-btn:hover,\n#plugin-btn:hover,\n#contact-btn:hover {\n  font-size: 34px;\n  color: #aabbd7;\n  border-top: 2px solid #aabbd7;\n  border-bottom: 2px solid #aabbd7;\n}\n\n.active {\n  color: #c1a97a;\n  text-shadow: 0 0 10px #c1a97a, 0 0 20px #c1a97a;\n}\n\n#container {\n  color: #a9b3d9;\n  margin: 4rem 16rem;\n}\n\na {\n  color: #b796ed;\n  text-decoration: none;\n}\n"],sourceRoot:""}]);const c=r},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",i=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),i&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),i&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,i,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(i)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(r[s]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);i&&r[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,i=0;i<n.length;i++)if(n[i].identifier===e){t=i;break}return t}function i(e,i){for(var a={},r=[],c=0;c<e.length;c++){var s=e[c],l=i.base?s[0]+i.base:s[0],d=a[l]||0,m="".concat(l," ").concat(d);a[l]=d+1;var p=t(m),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var h=o(u,i);i.byIndex=c,n.splice(c,0,{identifier:m,updater:h,references:1})}r.push(m)}return r}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=i(e=e||[],o=o||{});return function(e){e=e||[];for(var r=0;r<a.length;r++){var c=t(a[r]);n[c].references--}for(var s=i(e,o),l=0;l<a.length;l++){var d=t(a[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var i=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var i="";t.supports&&(i+="@supports (".concat(t.supports,") {")),t.media&&(i+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(i+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),i+=t.css,o&&(i+="}"),t.media&&(i+="}"),t.supports&&(i+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(i,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},666:(e,n,t)=>{t.d(n,{AB:()=>o,dc:()=>i,dl:()=>r});const i=()=>{const e=document.createElement("header");return e.textContent="Lsig's Neovim config",e},o=()=>{const e=document.createElement("nav"),n=a("Home","home-btn"),t=a("Plugins","plugin-btn"),i=a("Contact me","contact-btn");return n.setAttribute("class","active"),e.appendChild(n),e.appendChild(t),e.appendChild(i),e},a=(e,n)=>{const t=document.createElement("div");return t.setAttribute("id",n),t.setAttribute("class","btn"),t.innerText=e,t},r=()=>{const e=document.createElement("div"),n=document.createElement("h1"),t=document.createTextNode("Setting up your Neovim config"),i=c(),o=s(),a=l(),r=d();return n.appendChild(t),e.setAttribute("id","setup"),e.appendChild(n),e.appendChild(i),e.appendChild(o),e.appendChild(a),e.appendChild(r),e},c=()=>{const e=document.createElement("div"),n=document.createElement("h2"),t=document.createElement("p"),i=document.createTextNode("1. Installation"),o=document.createTextNode("To install Neovim, a user can go to the official website at neovim.io and follow the installation instructions provided for their specific operating system. Neovim supports various platforms including Windows, macOS, and Linux.");return n.appendChild(i),t.appendChild(o),e.appendChild(n),e.appendChild(t),e},s=()=>{const e=document.createElement("div"),n=document.createElement("h2"),t=document.createElement("p"),i=document.createTextNode("2. Structuring your Neovim config"),o=document.createTextNode("To setup your Neovim config, go to your .config folder from your home directory. If the directory does not exist, mkdir .config in your homedirectory. Go inside .config and make a folder called nvim. Now make a init.lua file, a folder called lua and a folder called after. Inside the after directory make a folder called plugins, this is where your plugins will be stored and configured. Inside the lua folder make a directory <your-name>, this folder will store your core config files which will be loaded before your plugins. This video by ThePrimeagen (legend) kickstarted my Neovim journey and is extremely helpful, check it out!"),a=document.createElement("a");a.href="https://www.youtube.com/watch?v=w7i4amO_zaE&t=839s&ab_channel=ThePrimeagen",a.target="_blank";const r=document.createTextNode("Primes setup tutorial.");return n.appendChild(i),t.appendChild(o),a.appendChild(r),e.appendChild(n),e.appendChild(t),e.appendChild(a),e},l=()=>{const e=document.createElement("div"),n=document.createElement("h2"),t=document.createElement("p"),i=document.createTextNode("3. Setting up your Neovim plugin manager"),o=document.createTextNode("There are some popular Neovim plugin managers out there like Packer, Lazy and VimPlug. I personally use lazy.nvim which I am extremely happy with and mad props to folke. So I will focus on setting up on the Lazy plugin manager. Inside your <your-name> folder create a file called lazy.nvim. Goto lazy.nvim github page and follow the installation instructions, after that check out the plugins page and start adding the essential plugins listed there."),a=document.createElement("a");a.href="https://github.com/folke/lazy.nvim",a.target="_blank";const r=document.createTextNode("Lazy.nvim on github, check it out!");return n.appendChild(i),t.appendChild(o),a.appendChild(r),e.appendChild(n),e.appendChild(t),e.appendChild(a),e},d=()=>{const e=document.createElement("div"),n=document.createElement("h2"),t=document.createElement("p"),i=document.createTextNode("4. Enjoy Neovim!"),o=document.createTextNode("Now you have probably downloaded your first plugins, maybe written a little program using Neovim, I know at first it is tough; especially if you are just learning Vim motions. But trust me, it will be worth it, your productivity will go up, learning new motions and seeing noticable progress feels amazing, and the best part, Neovim is your own personalized text editor. No one will have the same experience as you, which I find amazing. Hope your Neovim journey will be long and fruitful, stay curious!  ");return n.appendChild(i),t.appendChild(o),e.appendChild(n),e.appendChild(t),e}},858:(e,n,t)=>{var i=t(379),o=t.n(i),a=t(795),r=t.n(a),c=t(569),s=t.n(c),l=t(565),d=t.n(l),m=t(216),p=t.n(m),u=t(589),h=t.n(u),g=t(426),f={};f.styleTagTransform=h(),f.setAttributes=d(),f.insert=s().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=p(),o()(g.Z,f),g.Z&&g.Z.locals&&g.Z.locals;var v=t(666),A=t(167);const b=document.getElementById("container"),y=((()=>{const e=(0,v.dc)(),n=(0,v.AB)();document.body.insertBefore(e,b),document.body.insertBefore(n,b)})(),e=>{document.querySelector(".active").classList.remove("active"),document.getElementById(e).classList.add("active")}),C=()=>{const e=(0,v.dl)();b.innerHTML="",b.appendChild(e),y("home-btn")};(()=>{const e=document.getElementById("home-btn"),n=document.getElementById("plugin-btn"),t=document.getElementById("contact-btn");e.addEventListener("click",(()=>C())),n.addEventListener("click",(()=>(()=>{const e=(0,A.M)();b.innerHTML="",b.appendChild(e),y("plugin-btn")})())),t.addEventListener("click",(()=>(()=>{const e=(()=>{const e=document.createElement("div"),n=document.createElement("h1"),t=document.createElement("p"),i=document.createElement("p"),o=document.createElement("a"),a=document.createTextNode("Contact information"),r=document.createTextNode("If you want to talk about neovim or discuss me config, feel free to contact me through the channels below."),c=document.createTextNode("Email: logisig1@gmail.com");n.appendChild(a),t.appendChild(r),i.appendChild(c),o.href="https://github.com/lsig",o.target="_blank";const s=document.createTextNode("Github: github.com/lsig");return o.appendChild(s),e.appendChild(n),e.appendChild(t),e.appendChild(i),e.appendChild(o),e})();b.innerHTML="",b.appendChild(e),y("contact-btn")})()))})(),C()},167:(e,n,t)=>{t.d(n,{M:()=>a});const i=JSON.parse('{"Bv":[{"name":"neovim/nvim-lspconfig","url":"https://github.com/neovim/nvim-lspconfig","description":"Lspconfig is a helper plugin that leverages the language client API in neovim core for an easier to use experience."},{"name":"williamboman/mason.nvim","url":"https://github.com/williamboman/mason.nvim","description":"Portable package manager for Neovim that runs everywhere Neovim runs. Easily install and manage LSP servers, DAP servers, linters, and formatters."},{"name":"williamboman/mason-lspconfig.nvim","url":"https://github.com/williamboman/mason-lspconfig.nvim","description":"Mason-lspconfig bridges mason.nvim with the lspconfig plugin - making it easier to use both plugins together."},{"name":"onsails/lspkind.nvim","url":"https://github.com/onsails/lspkind.nvim","description":"This tiny plugin adds vscode-like pictograms to neovim built-in lsp"},{"name":"glepnir/lspsaga.nvim","url":"https://github.com/glepnir/lspsaga.nvim","description":"Enhance your Neovim\'s lsp experience"},{"name":"jose-elias-alvarez/null-ls.nvim","url":"https://github.com/jose-elias-alvarez/null-ls.nvim","description":"Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua."}],"az":[{"name":"hrsh7th/nvim-cmp","url":"https://github.com/hrsh7th/nvim-cmp","description":"A completion engine plugin for neovim written in Lua. Completion sources are installed from external repositories and \\"sourced\\". This plugin has a lot of dependencies which are not listed here, but are listed on github"},{"name":"L3MON4D3/LuaSnip","url":"https://github.com/L3MON4D3/LuaSnip","description":"Snippet engine written in Lua"},{"name":"rafamadriz/friendly-snippets","url":"https://github.com/rafamadriz/friendly-snippets","description":"Snippets collection for a set of different programming languages for faster development. The only goal is to have one community driven repository for all kinds of snippets in all programming languages, this way you can have it all in one place."}],"j":[{"name":"tpope/vim-fugitive","url":"https://github.com/tpope/vim-fugitive","description":"Fugitive is the premier Vim plugin for Git. Or maybe it\'s the premier Git plugin for Vim? Either way, it\'s \\"so awesome, it should be illegal\\". That\'s why it\'s called Fugitive."},{"name":"lewis6991/gitsigns.nvim","url":"https://github.com/lewis6991/gitsigns.nvim","description":"Super fast git decorations implemented purely in lua/teal."}],"YO":[{"name":"folke/tokyonight.nvim","url":"https://github.com/folke/tokyonight.nvim","description":"A dark and light Neovim theme written in Lua ported from the Visual Studio Code TokyoNight theme. Includes extra themes for Kitty, Alacritty, iTerm and Fish. The colors of this website are inspired by the tokyonight colorscheme!"},{"name":"nvim-treesitter/nvim-treesitter","url":"https://github.com/nvim-treesitter/nvim-treesitter","description":"The goal of nvim-treesitter is both to provide a simple and easy way to use the interface for tree-sitter in Neovim and to provide some basic functionality such as highlighting based on it."},{"name":"nvim-telescope/telescope.nvim","url":"https://github.com/nvim-telescope/telescope.nvim","description":"telescope.nvim is a highly extendable fuzzy finder over lists. Built on the latest awesome features from neovim core. Telescope is centered around modularity, allowing for easy customization."},{"name":"windwp/nvim-autopairs","url":"https://github.com/windwp/nvim-autopairs","description":"A super powerful autopair plugin for Neovim that supports multiple characters."},{"name":"windwp/nvim-ts-autotag","url":"https://github.com/windwp/nvim-ts-autotag","description":"Use treesitter to autoclose and autorename html tags"},{"name":"nvim-lualine/lualine.nvim","url":"https://github.com/nvim-lualine/lualine.nvim","description":"A blazingly fast and easy to configure Neovim statusline written in Lua."},{"name":"echasnovski/mini.surround","url":"https://github.com/echasnovski/mini.surround","description":"Fast and feature-rich surround actions"},{"name":"numToStr/Comment.nvim","url":"https://github.com/numToStr/Comment.nvim","description":"Smart and Powerful commenting plugin for neovim"},{"name":"folke/todo-comments.nvim","url":"https://github.com/folke/todo-comments.nvim","description":"todo-comments is a lua plugin for Neovim 0.5 to highlight and search for todo comments like TODO, HACK, BUG in your code base."},{"name":"tpope/vim-sleuth","url":"https://github.com/tpope/vim-sleuth","description":"Plugin that automatically adjusts \'shiftwidth\' and \'expandtab\' heuristically based on the current file"},{"name":"christoomey/vim-tmux-navigator","url":"https://github.com/christoomey/vim-tmux-navigator","description":"When combined with a set of tmux key bindings, the plugin will allow you to navigate seamlessly between vim and tmux splits using a consistent set of hotkeys."}]}'),o=(e,n)=>{const t=document.createElement("div"),i=document.createElement("h2"),o=document.createTextNode(e);return i.appendChild(o),t.appendChild(i),t.setAttribute("id",e),n.forEach((e=>{const n=((e,n,t)=>{const i=document.createElement("div"),o=document.createElement("h3"),a=document.createElement("a"),r=document.createElement("p");a.href=n,a.target="_blank";const c=document.createTextNode(e),s=document.createTextNode(t);return a.appendChild(c),r.appendChild(s),o.appendChild(a),i.appendChild(o),i.appendChild(r),i})(e.name,e.url,e.description);t.appendChild(n)})),t},a=()=>{const e=document.createElement("div"),n=document.createElement("h1"),t=document.createTextNode("A list of my current plugins 🔌");n.appendChild(t),e.appendChild(n);const a=o("Lsp-related plugins",i.Bv),r=o("Cmp-related plugins",i.az),c=o("Git-related plugins",i.j),s=o("Other essential plugins",i.YO);return e.appendChild(a),e.appendChild(r),e.appendChild(c),e.appendChild(s),e}}},e=>{e(e.s=858)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,